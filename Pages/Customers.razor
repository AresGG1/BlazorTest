@page "/customers"

<PageTitle>Items</PageTitle>

@using BlazorServerApp.Data
@using BlazorServerApp.Data.Models
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime


<h1>Customers</h1>

<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Email</th>
        <th>Age</th>
        <th>Address</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in @ItemsList)
    {
    <tr>
        <td>@item.Id</td>
        <td>@item.Name</td>
        <td>@item.Email</td>
        <td>@item.Age</td>
        <td>@item.Address</td>
        <input type="radio"  name="id" onchange="@(()=>@SetId(item.Id))" value="@item.Id">
    </tr>
    }
    </tbody>
</table>
<button class="btn btn-primary" onclick="@Add">Add</button>
<button class="btn btn-primary" onclick="@Edit">Edit</button>
<button class="btn btn-primary" onclick="@Delete">Delete</button>
<p></p>
<h3>Search</h3>
<input type="text" @bind="@Id" placeholder="Customer id">
<input type="text" @bind="@Name" placeholder="Customer name">

<input type="text" @bind="@Email" placeholder="Email">

<input type="text" @bind="@Age" placeholder="Age">

<input type="text" @bind="@Address" placeholder="Address">

<p><button class="btn btn-primary" @onclick="@Search">Search</button>
    <button class="btn btn-primary" @onclick="@Reset">Reset</button></p>

@code {
    private int? Id { get; set; }
    private string Name { get; set; } = "";
    private string Email { get; set; } = "";
    private int? Age { get; set; }
    private string Address { get; set; } = "";

    int id = 0;
    private List<Customer> ItemsList { get; set; }

    private void SetId(int data)
    {
        id = data;
    }

    public void Search()
    {
        var db = DataContext.GetInstance();
        ItemsList = db.Customers.ToList();
        List < Customer > items = new List<Customer>();
        if (Id != null || Id.ToString() != "")
        {
            items = ItemsList.Where(x=>x.Id == Id).ToList();
            ItemsList = items;
        }
        if (Name != "")
        {
            items = ItemsList.Where(x => x.Name.Contains(Name)).ToList();
            ItemsList = items;
        }
        if (Email != "")
        {
            items = ItemsList.Where(x => x.Email.Contains(Email)).ToList();
            ItemsList = items;
        }
        if (Age != null || Age.ToString() != "")
        {
            items = ItemsList.Where(x => x.Age == Age).ToList();
            ItemsList = items;
        }
        if (Address != "")
        {
            items = ItemsList.Where(x => x.Address.Contains(Address)).ToList();
            ItemsList = items;
        }

    }
    public void Reset()
    {
        var db = DataContext.GetInstance();
        ItemsList = db.Customers.ToList();
        Id = null;
        Age = null;
        Name = "";
        Email = "";
        Address = "";
    }

    public void Add()
    {
        string url = NavigationManager.Uri + "/add";
        NavigationManager.NavigateTo(url);
    }
    async public void Edit()
    {
        if (id == 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Chose item!");
            return;
        }
        string url = NavigationManager.Uri + "/add";
        string paramUrl = url + "/" + id.ToString();
        NavigationManager.NavigateTo(paramUrl);
    }
    async public void Delete()
    {
        if (id == 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Chose item!");
            return;
        }
        var db = DataContext.GetInstance();
        var item = db.Customers.Find(id);
        if (item != null)
            db.Customers.Remove(item);
        db.SaveChanges();
        HandleClick();
    }
    protected override async Task OnInitializedAsync()
    {
        var db = DataContext.GetInstance();
        ItemsList = db.Customers.ToList();

    }
    private void HandleClick()
    {
        // NavigationManager.NavigateTo("items", true);
        var db = DataContext.GetInstance();
        ItemsList = db.Customers.ToList();
    }
}